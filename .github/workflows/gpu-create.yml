name: GPU • Create instance

on:
  workflow_dispatch:
    inputs:
      region_id:
        description: "Region ID (e.g., ewr, sjc, ams, fra)"
        required: true
      plan_id:
        description: "GPU Plan ID (from regions availability)"
        required: true
      os_id:
        description: "OS ID (e.g., 215=Ubuntu 22.04, 477=Ubuntu 24.04)"
        required: true
      label:
        description: "Instance label"
        required: false
        default: "gpu-from-actions"
      add_ssh_key_ids:
        description: "Comma-separated Vultr SSH Key IDs (optional) — e.g., ssh-aaaa,ssh-bbbb"
        required: false
        default: ""
      ssh_public_key:
        description: "Public key text (optional) — e.g., output of 'cat ~/.ssh/id_ed25519.pub'"
        required: false
        default: ""
      ssh_public_key_file:
        description: "Path (optional) to a repo file containing a public key (e.g., keys/id_ed25519.pub)"
        required: false
        default: ""

jobs:
  create-gpu:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity checks
        run: |
          if [ -z "${{ secrets.VULTR_API_KEY }}" ]; then
            echo "::error::Missing secret VULTR_API_KEY"
            exit 1
          fi

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - id: create
        name: Create GPU instance (API-based)
        env:
          VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
        run: |
          chmod +x scripts/create_gpu.sh

          ARGS=()
          ARGS+=( --region "${{ github.event.inputs.region_id }}" )
          ARGS+=( --plan "${{ github.event.inputs.plan_id }}" )
          ARGS+=( --os "${{ github.event.inputs.os_id }}" )
          ARGS+=( --label "${{ github.event.inputs.label }}" )

          if [ -n "${{ github.event.inputs.add_ssh_key_ids }}" ]; then
            ARGS+=( --sshkeys "${{ github.event.inputs.add_ssh_key_ids }}" )
          fi

          if [ -n "${{ github.event.inputs.ssh_public_key }}" ]; then
            ARGS+=( --sshpub "${{ github.event.inputs.ssh_public_key }}" )
          fi

          if [ -n "${{ github.event.inputs.ssh_public_key_file }}" ]; then
            if [ ! -f "${{ github.event.inputs.ssh_public_key_file }}" ]; then
              echo "::error::ssh_public_key_file not found: ${{ github.event.inputs.ssh_public_key_file }}"
              exit 1
            fi
            ARGS+=( --sshpubfile "${{ github.event.inputs.ssh_public_key_file }}" )
          fi

          ./scripts/create_gpu.sh "${ARGS[@]}"

      - name: Upload instance json (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: instance-${{ steps.create.outputs.instance_id }}
          path: instance-${{ steps.create.outputs.instance_id }}.json
          if-no-files-found: error

      - name: Job summary
        run: |
          echo "### Vultr GPU created ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **Instance ID:** \`${{ steps.create.outputs.instance_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Label:** \`${{ github.event.inputs.label }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** \`${{ github.event.inputs.region_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Plan:** \`${{ github.event.inputs.plan_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **OS:** \`${{ github.event.inputs.os_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Download the artifact to see IP and full details." >> $GITHUB_STEP_SUMMARY

